// <auto-generated />
using FreshMeatServer.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FreshMeatServer.DataModel.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FreshMeatServer.DataModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long?>("FacebookId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharName")
                        .IsRequired();

                    b.Property<Guid>("PlayerId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.ChildAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttributeName")
                        .IsRequired();

                    b.Property<Guid>("ParentAttributeId");

                    b.HasKey("Id");

                    b.HasIndex("ParentAttributeId");

                    b.ToTable("ChildAttributes");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.ChildAttributeSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChildAttributeId");

                    b.Property<int>("Level");

                    b.Property<Guid>("ParentAttributeSelectionId");

                    b.HasKey("Id");

                    b.HasIndex("ChildAttributeId");

                    b.HasIndex("ParentAttributeSelectionId");

                    b.ToTable("ChildAttributeSelections");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ItemId");

                    b.Property<int>("ItemQuantity");

                    b.Property<Guid>("MatcherId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MatcherId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ItemName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MasterId");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Matcher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CharacterId");

                    b.Property<Guid>("MatchId");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MatchId");

                    b.ToTable("Matchers");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.ParentAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AttributeName")
                        .IsRequired();

                    b.Property<int>("MaxValue");

                    b.Property<int>("MinValue");

                    b.HasKey("Id");

                    b.ToTable("ParentAttributes");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.ParentAttributeSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CharacterId");

                    b.Property<int>("Level");

                    b.Property<Guid>("ParentAttributeId");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ParentAttributeId");

                    b.ToTable("ParentAttributeSelections");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IconType");

                    b.Property<Guid?>("MatcherId");

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MatcherId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Character", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.Player", "Player")
                        .WithMany("Characters")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.ChildAttribute", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.ParentAttribute", "ParentAttribute")
                        .WithMany("ChildAttributes")
                        .HasForeignKey("ParentAttributeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.ChildAttributeSelection", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.ChildAttribute", "ChildAttribute")
                        .WithMany()
                        .HasForeignKey("ChildAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FreshMeatServer.DataModel.ParentAttributeSelection", "ParentAttributeSelection")
                        .WithMany("ChildAttributeSelections")
                        .HasForeignKey("ParentAttributeSelectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Inventory", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.Item", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FreshMeatServer.DataModel.Matcher", "Matcher")
                        .WithMany("Inventories")
                        .HasForeignKey("MatcherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Master", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Match", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.Master", "Master")
                        .WithMany("Matches")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Matcher", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.Character", "Character")
                        .WithMany("Matchers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FreshMeatServer.DataModel.Match", "Match")
                        .WithMany("Matchers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.ParentAttributeSelection", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.Character", "Character")
                        .WithMany("ParentAttributeSelections")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FreshMeatServer.DataModel.ParentAttribute", "ParentAttribute")
                        .WithMany()
                        .HasForeignKey("ParentAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Player", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FreshMeatServer.DataModel.Status", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.Matcher")
                        .WithMany("Statuses")
                        .HasForeignKey("MatcherId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FreshMeatServer.DataModel.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FreshMeatServer.DataModel.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
